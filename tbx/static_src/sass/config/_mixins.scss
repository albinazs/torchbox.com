@use "sass:list";
@use "sass:map";
@use "functions" as *;
@use "variables" as *;

/* ============================================
    Media queries
*/
@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in $breakpoints {
            $name: list.nth($breakpoint, 1);
            $declaration: list.nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}

/* ============================================
    z-index
*/

@mixin z-index($key) {
    z-index: z-index($key);
}

/* ============================================
  Placeholder text
*/
@mixin placeholder-text() {
    &.placeholder {
        @content;
    }

    &::placeholder {
        @content;
    }
}

/* ============================================
  iOS Native vertical scroll
*/
@mixin native-vertical-scroll() {
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
}

/* ============================================
    Output a rem and px fallback value for the given property
*/
@mixin rem($property, $values) {
    $px: ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto or $value == inherit {
            $px: list.append($px, $value);
            $rem: list.append($rem, $value);
        } @else {
            $px: list.append($px, $value);
            $rem: list.append($rem, rem(strip-unit($value)));
        }
    }
    #{$property}: $px;
    #{$property}: $rem;
}

/* ============================================
    Output a `font-size: [x]rem;` declaration for the given px value
*/
@mixin rem-font-size($font-size) {
    @include rem(font-size, $font-size);
}

/* ============================================
    Font sizes
*/
@mixin font-size($keyword) {
    // Assuming each value in the font-size maps is a list of (size, line-height)
    $small-values: map-get($small-font-sizes, $keyword);
    $large-values: map-get($large-font-sizes, $keyword);

    // Access the font size and line height from the list
    $small-size: nth($small-values, 1);
    $small-line-height: nth($small-values, 2);

    $large-size: nth($large-values, 1);
    $large-line-height: nth($large-values, 2);

    @if $small-size == null or $large-size == null {
        @warn 'Font size `#{$keyword}` does not exist in the map.';
    } @else {
        @include rem-font-size($small-size);
        line-height: $small-line-height;

        @include media-query(large) {
            @include rem-font-size($large-size);
            line-height: $large-line-height;
        }
    }
}

/* ============================================
    Drop cap - used for heading one, heading one-b and heading two
*/
@mixin drop-cap($small-size, $large-size) {
    &::first-letter {
        @include rem-font-size($small-size);
        line-height: 1; // Reset line height to 1 to avoid spacing issues
        font-weight: $weight--semibold;

        @include media-query(large) {
            @include rem-font-size($large-size);
        }
    }
}

/* ============================================
    Link styles
*/
@mixin link-styles(
    $color: var(--color--link),
    $interaction-color: var(--color--link-interaction)
) {
    color: $color;
    text-decoration: underline;

    &:hover {
        color: $interaction-color;
        text-decoration-thickness: 2px;
        text-shadow: 0 0 0.4px $color, 0 0 0.4px $color;
    }

    &:focus {
        outline: $focus-width solid var(--color--focus-ring);
        text-decoration-thickness: 2px;
        text-shadow: 0 0 0.4px $color, 0 0 0.4px $color;
    }
}
