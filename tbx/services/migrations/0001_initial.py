# Generated by Django 4.2.8 on 2023-12-22 16:53

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        ("images", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ServicePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("social_text", models.CharField(blank=True, max_length=255)),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light"),
                            ("coral", "Coral"),
                            ("dark", "Dark"),
                        ],
                        default="light",
                        max_length=255,
                    ),
                ),
                ("strapline", models.CharField(max_length=255)),
                ("intro", wagtail.fields.RichTextField(blank=True)),
                (
                    "greeting_image_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("woman-left", "Woman (Left Aligned)"),
                            ("man-left", "Man (Left aligned)"),
                            ("wagtail", "Wagtail (Right aligned)"),
                        ],
                        default="woman-left",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("heading_for_key_points", wagtail.fields.RichTextField(blank=True)),
                ("use_process_block_image", models.BooleanField(default=False)),
                ("heading_for_processes", models.TextField(blank=True, null=True)),
                (
                    "process_section_cta",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="An opportunity to use a more flexible call to action, if the main “Contact” fields aren’t suitable",
                        verbose_name="Process section CTA",
                    ),
                ),
                (
                    "processes_section_embed_url",
                    models.URLField(blank=True, verbose_name="Embed URL"),
                ),
                (
                    "key_points_section_title",
                    models.TextField(blank=True, default="Services"),
                ),
                (
                    "testimonials_section_title",
                    models.TextField(
                        blank=True,
                        default="Clients",
                        help_text="Leave this field empty to hide the testimonials section.",
                    ),
                ),
                (
                    "case_studies_section_title",
                    models.TextField(
                        blank=True,
                        default="Work",
                        help_text="Leave this field empty to hide the case studies section.",
                    ),
                ),
                (
                    "blogs_section_title",
                    models.TextField(blank=True, default="Thinking"),
                ),
                (
                    "process_section_title",
                    models.TextField(blank=True, default="Process"),
                ),
                (
                    "call_to_action",
                    wagtail.fields.StreamField(
                        [
                            (
                                "key_points_summary",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            ("title", wagtail.blocks.CharBlock()),
                                            ("intro", wagtail.blocks.CharBlock()),
                                            ("link", wagtail.blocks.PageChooserBlock()),
                                        ]
                                    ),
                                    help_text="Please add a minumum of 3 and a maximum of 6 key points.",
                                    icon="list-ul",
                                    max_num=6,
                                    min_num=3,
                                    template="patterns/molecules/streamfield/blocks/key_points_summary.html",
                                ),
                            ),
                            (
                                "testimonials",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "quote",
                                                wagtail.blocks.CharBlock(
                                                    form_classname="quote title"
                                                ),
                                            ),
                                            ("name", wagtail.blocks.CharBlock()),
                                            ("role", wagtail.blocks.CharBlock()),
                                            (
                                                "link",
                                                wagtail.blocks.StreamBlock(
                                                    [
                                                        (
                                                            "internal_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "page",
                                                                        wagtail.blocks.PageChooserBlock(),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(
                                                                            required=False
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "external_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "link_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="URL"
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ],
                                                    required=False,
                                                ),
                                            ),
                                        ]
                                    ),
                                    icon="openquote",
                                    template="patterns/molecules/streamfield/blocks/testimonial_block.html",
                                ),
                            ),
                            (
                                "clients",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "image",
                                                wagtail.images.blocks.ImageChooserBlock(),
                                            ),
                                            (
                                                "link",
                                                wagtail.blocks.StreamBlock(
                                                    [
                                                        (
                                                            "internal_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "page",
                                                                        wagtail.blocks.PageChooserBlock(),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(
                                                                            required=False
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "external_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "link_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="URL"
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ],
                                                    required=False,
                                                ),
                                            ),
                                        ]
                                    ),
                                    icon="site",
                                    label="Clients logo",
                                    template="patterns/molecules/streamfield/blocks/client-logo-block.html",
                                ),
                            ),
                            (
                                "embed_plus_cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("title", wagtail.blocks.CharBlock()),
                                        ("intro", wagtail.blocks.CharBlock()),
                                        (
                                            "link",
                                            wagtail.blocks.PageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "external_link",
                                            wagtail.blocks.URLBlock(
                                                label="External Link", required=False
                                            ),
                                        ),
                                        ("button_text", wagtail.blocks.CharBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "embed",
                                            wagtail.embeds.blocks.EmbedBlock(
                                                label="Youtube Embed", required=False
                                            ),
                                        ),
                                    ],
                                    icon="code",
                                    label="Embed + CTA",
                                    template="patterns/molecules/streamfield/blocks/embed_plus_cta_block.html",
                                ),
                            ),
                            (
                                "cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Words in  &lt;span&gt; tag will display in a contrasting colour."
                                            ),
                                        ),
                                        (
                                            "link",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "internal_link",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "page",
                                                                    wagtail.blocks.PageChooserBlock(),
                                                                ),
                                                                (
                                                                    "link_text",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "external_link",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "link_url",
                                                                    wagtail.blocks.URLBlock(
                                                                        label="URL"
                                                                    ),
                                                                ),
                                                                (
                                                                    "link_text",
                                                                    wagtail.blocks.CharBlock(),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ],
                                    icon="plus-inverse",
                                    template="patterns/molecules/streamfield/blocks/cta.html",
                                ),
                            ),
                        ],
                        blank=True,
                        use_json_field=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="ServicePageClientLogo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServicePageFeaturedBlogPost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServicePageFeaturedCaseStudy",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServicePageKeyPoint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("text", models.CharField(max_length=255)),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServicePageProcess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("title", models.TextField()),
                ("description", models.TextField()),
                (
                    "external_link",
                    models.URLField(blank=True, verbose_name="External link"),
                ),
                ("link_label", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServicePageTestimonial",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("quote", models.TextField()),
                ("name", models.CharField(max_length=255)),
                ("role", models.CharField(max_length=255)),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServicePageUSAClientLogo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("social_text", models.CharField(blank=True, max_length=255)),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light"),
                            ("coral", "Coral"),
                            ("dark", "Dark"),
                        ],
                        default="light",
                        max_length=255,
                    ),
                ),
                ("strapline", models.CharField(max_length=255)),
                ("intro", wagtail.fields.RichTextField(blank=True)),
                (
                    "greeting_image_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("woman-left", "Woman (Left Aligned)"),
                            ("man-left", "Man (Left aligned)"),
                            ("wagtail", "Wagtail (Right aligned)"),
                        ],
                        default="woman-left",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("heading_for_key_points", wagtail.fields.RichTextField(blank=True)),
                ("use_process_block_image", models.BooleanField(default=False)),
                ("heading_for_processes", models.TextField(blank=True, null=True)),
                (
                    "process_section_cta",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="An opportunity to use a more flexible call to action, if the main “Contact” fields aren’t suitable",
                        verbose_name="Process section CTA",
                    ),
                ),
                (
                    "processes_section_embed_url",
                    models.URLField(blank=True, verbose_name="Embed URL"),
                ),
                (
                    "key_points_section_title",
                    models.TextField(blank=True, default="Services"),
                ),
                (
                    "testimonials_section_title",
                    models.TextField(
                        blank=True,
                        default="Clients",
                        help_text="Leave this field empty to hide the testimonials section.",
                    ),
                ),
                (
                    "case_studies_section_title",
                    models.TextField(
                        blank=True,
                        default="Work",
                        help_text="Leave this field empty to hide the case studies section.",
                    ),
                ),
                (
                    "blogs_section_title",
                    models.TextField(blank=True, default="Thinking"),
                ),
                (
                    "process_section_title",
                    models.TextField(blank=True, default="Process"),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "key_points_summary",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            ("title", wagtail.blocks.CharBlock()),
                                            ("intro", wagtail.blocks.CharBlock()),
                                            ("link", wagtail.blocks.PageChooserBlock()),
                                        ]
                                    ),
                                    help_text="Please add a minumum of 3 and a maximum of 6 key points.",
                                    icon="list-ul",
                                    max_num=6,
                                    min_num=3,
                                    template="patterns/molecules/streamfield/blocks/key_points_summary.html",
                                ),
                            ),
                            (
                                "testimonials",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "quote",
                                                wagtail.blocks.CharBlock(
                                                    form_classname="quote title"
                                                ),
                                            ),
                                            ("name", wagtail.blocks.CharBlock()),
                                            ("role", wagtail.blocks.CharBlock()),
                                            (
                                                "link",
                                                wagtail.blocks.StreamBlock(
                                                    [
                                                        (
                                                            "internal_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "page",
                                                                        wagtail.blocks.PageChooserBlock(),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(
                                                                            required=False
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "external_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "link_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="URL"
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ],
                                                    required=False,
                                                ),
                                            ),
                                        ]
                                    ),
                                    icon="openquote",
                                    template="patterns/molecules/streamfield/blocks/testimonial_block.html",
                                ),
                            ),
                            (
                                "clients",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "image",
                                                wagtail.images.blocks.ImageChooserBlock(),
                                            ),
                                            (
                                                "link",
                                                wagtail.blocks.StreamBlock(
                                                    [
                                                        (
                                                            "internal_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "page",
                                                                        wagtail.blocks.PageChooserBlock(),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(
                                                                            required=False
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "external_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "link_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="URL"
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ],
                                                    required=False,
                                                ),
                                            ),
                                        ]
                                    ),
                                    icon="site",
                                    label="Clients logo",
                                    template="patterns/molecules/streamfield/blocks/client-logo-block.html",
                                ),
                            ),
                            (
                                "embed_plus_cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("title", wagtail.blocks.CharBlock()),
                                        ("intro", wagtail.blocks.CharBlock()),
                                        (
                                            "link",
                                            wagtail.blocks.PageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "external_link",
                                            wagtail.blocks.URLBlock(
                                                label="External Link", required=False
                                            ),
                                        ),
                                        ("button_text", wagtail.blocks.CharBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "embed",
                                            wagtail.embeds.blocks.EmbedBlock(
                                                label="Youtube Embed", required=False
                                            ),
                                        ),
                                    ],
                                    icon="code",
                                    label="Embed + CTA",
                                    template="patterns/molecules/streamfield/blocks/embed_plus_cta_block.html",
                                ),
                            ),
                            (
                                "cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Words in  &lt;span&gt; tag will display in a contrasting colour."
                                            ),
                                        ),
                                        (
                                            "link",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "internal_link",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "page",
                                                                    wagtail.blocks.PageChooserBlock(),
                                                                ),
                                                                (
                                                                    "link_text",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "external_link",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "link_url",
                                                                    wagtail.blocks.URLBlock(
                                                                        label="URL"
                                                                    ),
                                                                ),
                                                                (
                                                                    "link_text",
                                                                    wagtail.blocks.CharBlock(),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ],
                                    icon="plus-inverse",
                                    template="patterns/molecules/streamfield/blocks/cta.html",
                                ),
                            ),
                        ],
                        blank=True,
                        use_json_field=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="SubServicePageClientLogo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePageFeaturedBlogPost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePageFeaturedCaseStudy",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePageUSAClientLogo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="images.customimage",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usa_client_logos",
                        to="services.subservicepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePageTestimonial",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("quote", models.TextField()),
                ("name", models.CharField(max_length=255)),
                ("role", models.CharField(max_length=255)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="testimonials",
                        to="services.subservicepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePageProcess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("title", models.TextField()),
                ("description", models.TextField()),
                (
                    "external_link",
                    models.URLField(blank=True, verbose_name="External link"),
                ),
                ("link_label", models.TextField(blank=True, null=True)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processes",
                        to="services.subservicepage",
                    ),
                ),
                (
                    "page_link",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubServicePageKeyPoint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("text", models.CharField(max_length=255)),
                (
                    "linked_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_points",
                        to="services.subservicepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
    ]
